import type { GetServerSideProps, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { BannerType, ProductType } from "../../components/types";
import ProductItem from "../../components/ProductItem";
import { useRouter } from "next/router";
import { type } from "os";
import { useState } from "react";

interface Props {
  productsData: ProductType[];
}

const Shop: NextPage<Props> = ({ productsData }) => {
  const router = useRouter();

  const [searchInput, setSearchInput] = useState<string>("");
  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  !(router.query.gender || router.query.search) && "how-active1"
                }`}
                data-filter="*"
                onClick={(
                  event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                ) => {
                  router.push({});
                }}
              >
                All Products
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.gender === "women" && "how-active1"
                }`}
                data-filter=".women"
                onClick={(
                  event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                ) => {
                  if (router.query.gender === "women") {
                    delete router.query.gender;
                    router.push({
                      query: { ...router.query },
                    });
                  } else {
                    router.push({
                      query: { ...router.query, gender: "women" },
                    });
                  }
                }}
              >
                Women
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.gender === "man" && "how-active1"
                }`}
                data-filter=".men"
                onClick={(
                  event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                ) => {
                  if (router.query.gender === "man") {
                    delete router.query.gender;
                    router.push({
                      query: { ...router.query },
                    });
                  } else {
                    router.push({
                      query: { ...router.query, gender: "man" },
                    });
                  }
                }}
              >
                Men
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.search === "belt" && "how-active1"
                }`}
                data-filter=".bag"
                onClick={(
                  event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                ) => {
                  if (router.query.search === "belt") {
                    delete router.query.search;
                    router.push({
                      query: { ...router.query },
                    });
                  } else {
                    router.push({
                      query: { ...router.query, search: "belt" },
                    });
                  }
                }}
              >
                Belt
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.search === "shoes" && "how-active1"
                }`}
                data-filter=".shoes"
                onClick={(
                  event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                ) => {
                  if (router.query.search === "shoes") {
                    delete router.query.search;
                    router.push({
                      query: { ...router.query },
                    });
                  } else {
                    router.push({
                      query: { ...router.query, search: "shoes" },
                    });
                  }
                }}
              >
                Shoes
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.search === "watch" && "how-active1"
                }`}
                data-filter=".watches"
                onClick={(
                  event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                ) => {
                  if (router.query.search === "watch") {
                    delete router.query.search;
                    router.push({
                      query: { ...router.query },
                    });
                  } else {
                    router.push({
                      query: { ...router.query, search: "watch" },
                    });
                  }
                }}
              >
                Watches
              </button>
            </div>

            <div className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search">
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>

            {/* search */}
            <div className="panel-search w-full p-t-10 p-b-15">
              <form
                className="bor8 dis-flex p-l-15"
                onSubmit={(e) => {
                  e.preventDefault();
                  router.push({
                    query: { ...router.query, search: searchInput },
                  });
                  setSearchInput("");
                }}
              >
                <button className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04">
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  onChange={(e) => setSearchInput(e.target.value)}
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  value={searchInput}
                />
              </form>
            </div>
          </div>

          <div className="row isotope-grid">
            {productsData.length === 0 ? (
              <p>There are no results</p>
            ) : (
              productsData.map((product) => (
                <ProductItem key={product.id} product={product} />
              ))
            )}
          </div>

          <div className="flex-l-m flex-w w-full p-t-10 m-lr--7">
            <a
              href="#"
              className="flex-c-m how-pagination1 trans-04 m-all-7 active-pagination1"
            >
              1
            </a>

            <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
              2
            </a>

            <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
              3
            </a>
          </div>
        </div>
      </div>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const gender = query.gender;
  const typeProd = query.search;

  let link;
  if (gender && typeProd) {
    link = `https://data-api-coza-store.vercel.app/products?gender_like=${gender}&q=${typeProd}`;
  } else if (gender) {
    link = `https://data-api-coza-store.vercel.app/products?gender_like=${gender}`;
  } else if (typeProd) {
    link = `https://data-api-coza-store.vercel.app/products?q=${typeProd}`;
  } else {
    link = "https://data-api-coza-store.vercel.app/products";
  }
  console.log(link);
  const resProducts = await fetch(link);
  const productsData: ProductType[] = await resProducts.json();
  return {
    props: {
      productsData,
    },
  };
};

export default Shop;
